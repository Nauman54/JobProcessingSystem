@page "/index"
@using ClassLibraryDAL
@using ClassLibraryModel
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Index</PageTitle>

<style>
    .user-dept-container {
        display: flex;
        justify-content: space-between; /* This will push the elements to the left and right corners */
    }
</style>

<div>
    <AuthorizeView>
        <Authorized>
            <!--<h3 class="text-center mt-1">Jobs</h3>-->
            <div class="user-dept-container">
                <div>
                    <img src="https://icons.veryicon.com/png/o/miscellaneous/icon-icon-of-ai-intelligent-dispensing/login-user-name-1.png" alt="Username" class="img-fluid" style="max-height:24px;" />
                    <span><strong>@username</strong></span>
                </div>
                <h2>Jobs</h2>
                <div>
                    <img src="https://icons.iconarchive.com/icons/icons8/windows-8/512/Business-Department-icon.png" alt="Department" class="img-fluid" style="max-height:20px;" />
                    <span><strong>@dept</strong></span>
                </div>
            </div>

            <div class="mt-4 d-flex justify-content-end">
                <a href="Job/addJob/@dept" class="btn btn-outline-primary btn-sm">Add Job</a>
            </div>

            <div class="mt-4">
                <table class="table table-striped table-bordered">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">Job No</th>
                            <th scope="col">Assigned To</th>
                            <th scope="col">Items</th>
                            <th scope="col">Department</th>
                            <th scope="col">Nature</th>
                            <th scope="col">Fault</th>
                            <th scope="col">JobDate</th>
                            <th scope="col">Remarks</th>
                            <th scope="col">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in jobData)
                        {
                            <tr>
                                <td>@item.JobNo</td>
                                <td>@item.AssignedToDept</td>
                                <td>@item.ItemName</td>
                                <td>@item.DeptName</td>
                                <td>@item.Nature</td>
                                <td>@item.Fault</td>
                                <td>@item.JobDate</td>
                                <td>@item.Remarks</td>
                                <td>
                                    <button class="btn btn-primary btn-sm" @onclick="() => PrintRow(item)">Print</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

        </Authorized>
    </AuthorizeView>
</div>

@code {
    public string? username;
    public string? dept;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private List<JobModel> jobData { get; set; } = new List<JobModel>();

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            username = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            dept = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            jobData = await Task.Run(() => JobDAL.GetJob(dept));
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var jsFunction = GetJavaScriptFunctionToPrintRow();
            await JSRuntime.InvokeVoidAsync("eval", jsFunction);
        }
    }

    private void PrintRow(JobModel row)
    {
        // Create a JavaScript function to print the row's data
        var jsFunction = $"printRow('{row.JobNo}', '{row.AssignedToDept}', '{row.ItemName}', '{row.DeptName}', '{row.Nature}', '{row.Fault}', '{row.JobDate}', '{row.Remarks}')";

        // Invoke the JavaScript function
        JSRuntime.InvokeVoidAsync("eval", jsFunction);
    }
}


@functions {
    private string GetJavaScriptFunctionToPrintRow()
    {
        return @"
            function printRow(jobNo, assignedToDept, ItemName, DeptName, Nature, Fault, JobDate, Remarks) {
                // Create a new window for printing
                var printWindow = window.open('', '', 'width=800,height=600');
                printWindow.document.open();
                printWindow.document.write('<html><head><title>' + DeptName + '</title>');
                printWindow.document.write('<style>');
                printWindow.document.write('body { font-family: Arial, sans-serif; }');
                printWindow.document.write('table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }');
                printWindow.document.write('table, th, td { border: 1px solid #000; }');
                printWindow.document.write('th, td { padding: 8px; text-align: left; }');
                printWindow.document.write('th { background-color: #f2f2f2; }');
                printWindow.document.write('title { margin-left: -10px; }');
                printWindow.document.write('h2 { margin-top: 40px; margin-bottom: 20px; text-align: center; }');
                printWindow.document.write('span:nth-child(even)  { margin-left: 15%; }');
                printWindow.document.write('div { margin-top: 90px; }');
                printWindow.document.write('</style>');
                printWindow.document.write('</head><body>');

                // Add header
                printWindow.document.write('<h2>' + DeptName + ', KRL Hospital Islamabad </h2>');

                // Add table for row data
                printWindow.document.write('<table>');
                printWindow.document.write('<tr><th>Job No</th><td>' + jobNo + '</td><th>Date</th><td>' + JobDate + '</td></tr>');
                printWindow.document.write('<tr><th>Item</th><td colspan='+3+'>' + ItemName + '</td></tr>');
                printWindow.document.write('<tr><th>Department</th><td colspan='+3+'>' + DeptName + '</td></tr>');
                printWindow.document.write('<tr><th>Fault</th><td colspan='+3+'>' + Fault + '</td></tr>');
                printWindow.document.write('<tr><th>Job Marked To</th><td colspan='+3+'>' + assignedToDept + '</td></tr>');
                printWindow.document.write('<tr><th>Nature</th><td colspan='+3+'>' + Nature + '</td></tr>');
                printWindow.document.write('<tr><th>Remarks</th><td colspan='+3+'>' + Remarks + '</td></tr>');
                // Add other row properties in a similar way
                printWindow.document.write('</table>');

                // Add space for signatures
                printWindow.document.write('<div>');
                printWindow.document.write('<div><span>OI/C (' + DeptName + '): __________________</span><span>Department HOD: __________________</span></ div >');
                printWindow.document.write('<div>Deputy Director: __________________</div>');
                printWindow.document.write('</div>');

                printWindow.document.write('</body></html>');
                printWindow.document.close();
                printWindow.print();
                printWindow.close();
            }
        ";
    }
}
