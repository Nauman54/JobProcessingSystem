@page "/Job/addJob/{dept}"
@using ClassLibraryModel
@using ClassLibraryDAL
@inject NavigationManager nm
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h3 class="text-center mb-4">Add Job</h3>

<br />
<EditForm Model="jobModel" OnSubmit="SaveJob">
	<div class="mb-3">
		<label for="assign" class="form-label">Assigned To</label>
		<br />
		<select class="form-control" id="assign" style="width:100%" @onchange="GetAssign">
			<option value="0">--Select Department--</option>
			@foreach (var item in deptModel)
			{
				<option value="@item.DepartmentId">@item.DeptName</option>
			}
		</select>
	</div>

	<div class="mb-3">
		<label for="equipment" class="form-label">Equipment</label>
		<br />
		<select class="form-control" id="equipment" style="width:100%" @onchange="GetEquipment">
			<option value="0">--Select Equipment--</option>
			@foreach (var item in eqpModel)
			{
				<option value="@item.ItemId">@item.ItemName</option>
			}
		</select>
	</div>

	<div class="mb-3">
		<label for="nature" class="form-label">Nature</label>
		<br />
		<input type="text" class="form-control" id="nature" @bind-value="jobModel.Nature" placeholder="Enter Nature" />
	</div>

	<div class="mb-3">
		<label for="fault" class="form-label">Fault</label>
		<br />
		<input type="text" class="form-control" id="fault" @bind-value="jobModel.Fault" placeholder="Enter Fault" />
	</div>

	<div class="mb-3">
		<label for="remarks" class="form-label">Remarks</label>
		<br />
		<input type="text" class="form-control" id="remarks" @bind-value="jobModel.Remarks" placeholder="Enter Remarks" />
	</div>

	<div class="d-grid gap-2 d-md-flex justify-content-md-end">
		<button type="submit" class="btn btn-outline-primary">@ButtonName</button>
	</div>

</EditForm>
<br />

@code {

	[Parameter]
	public string? dept { get; set; }

	public string? ButtonName { get; set; }

	private List<JobModel>? jobData { get; set; }
	private JobModel jobModel { get; set; } = new JobModel();

	private List<EquipmentModel> eqpModel { get; set; } = new List<EquipmentModel>();
	private int equipment { get; set; }

	private List<DepartmentModel> departModel { get; set; } = new List<DepartmentModel>();
	private int department { get; set; }

	private List<DepartmentModel> deptModel { get; set; } = new List<DepartmentModel>();
	private int assign { get; set; }

	protected override void OnInitialized()
	{
		LoadEquipment();
		LoadDepartment();
		LoadAssign();
		ButtonName = "Save";
	}

	private void GetAssign(ChangeEventArgs e)
	{
		assign = int.Parse(e.Value.ToString());
	}

	private void LoadAssign()
	{
		deptModel = DepartmentDAL.GetDepartment();
	}

	private void GetEquipment(ChangeEventArgs e)
	{
		equipment = int.Parse(e.Value.ToString());
	}

	private void LoadEquipment()
	{
		eqpModel = EquipmentDAL.GetEquipment();
	}

	private void LoadDepartment()
	{
		departModel = DepartmentDAL.GetDepartmentByName(dept);
		department = departModel[0].DepartmentId;
	}

	private void SaveJob()
	{
		if (assign > 0 && equipment > 0 && department > 0)
		{
			jobModel.AssignedTo = assign;
			jobModel.ItemId = equipment;
			jobModel.DepartmentId = department;
			if (JobDAL.SaveJob(jobModel) == 1)
			{
				nm.NavigateTo("/index");
			}
		}
	}

}
